#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function
import kouignamann
import sys
import re
from optparse import OptionParser

if __name__ == '__main__':

    node = None
    inventory = None
    category = None
    usage = "usage: %prog -i <inventory directory> [-f filter] [-k keys] [-n node]\n\n"\
            "examples:\n"\
            "   %prog -i inventory/  -F 'ip, device' -f 'device:.*sdb, ip:192.168.*' -n host1"

    parser = OptionParser(usage=usage)
    parser.add_option("-f", "--filter", dest="filters", 
            help="search filter (optional)",
            metavar="FILTER")
    parser.add_option("-F", "--fields", dest="fields", 
            help="fields to recover (optional)",
            metavar="FILTER")

    parser.add_option("-k", "--keys", dest="keys", 
            help="keys to recover (optional)",
            metavar="KEY")
    parser.add_option("-i", "--inventory", dest="inventory", 
            help="inventory directory (mandatory)", 
            metavar="INVDIR")
    parser.add_option("-n", "--node", dest="node",
            help="node to recover (optional)", 
            metavar="INVDIR")
    (options, args) = parser.parse_args()

    data = {}
    node      = options.node
    inventory = options.inventory
    filters   = options.filters
    fields    = options.fields

    if inventory is None:
        print("ERROR: missing inventory directory", file=sys.stderr)
        sys.exit(1)
    try:
        inv = kouignamann.Inventory(inventory)
    except kouignamann.errors.DumplicatedKey as e:
        print("ERROR: duplicated entry '%(host)s' in '%(key)s'" \
                % { 'key': e.key, 'host': e.host }, file=sys.stderr)
        sys.exit(1)
    except kouignamann.errors.RelationError as e:
        print("ERROR: missing inventory directory", file=sys.stderr)
        sys.exit(1)

    if not node is None and not node in inv.hosts:
        print("ERROR: node '%(node)s' not in inventory" % {'node': node}, file=sys.stderr)
        sys.exit(1)

    if not filters is None:
        tmp=re.split(r',\ *', filters)
        filtersDict={}
        for filter in tmp:
            key=re.split(r':', filter)[0]
            value=re.split(r':', filter)[1]
            filtersDict[key]=value
        data=inv.search(filtersDict, node=node)
    elif not node is None:
        data[node] = inv.hosts[node]
    else:
        data = inv.hosts

    if not fields is None:
        data=inv.select(data, re.split(r',\ *', fields))
    
    print(inv.format(data))

# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
